import os
import openpyxl

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from datetime import datetime, timedelta


FOLDER_ID = os.getenv("FOLDER_ID")

ROWS_FOR_WEEK_DAYS = ((12, 25), (26, 37), (38, 49), (50, 61), (62, 73))
HEADER_ROWS = (14, 26, 38, 50, 62)
BASE_PATH = 'downloaded_xlsx'
CREDS_PATH = 'bot_settings/credentials.json'


# ==============================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================

def _parse_date_range(date_range: str) -> tuple[datetime.date, datetime.date]:
	"""
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '22.09-27.09.2025' (dd.mm-dd.mm.yyyy)
	–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –¥–≤—É—Ö –¥–∞—Ç (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü).
	>>> _parse_date_range('22.09-27.09.2025')
	(datetime.date(2025, 9, 22), datetime.date(2025, 9, 27))
	"""
	start_date, end_date = date_range.split('-')
	end_date = datetime.strptime(end_date, '%d.%m.%Y').date()
	start_date = datetime.strptime(f'{start_date}.{end_date.year}', '%d.%m.%Y').date()
	return start_date, end_date


def _remove_all_files() -> None:
	"""–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
	for filename in os.listdir(BASE_PATH):
		file_path = os.path.join(BASE_PATH, filename)
		if os.path.isfile(file_path):
			os.remove(file_path)


def _download_new_xlsx() -> None:
	"""–°–∫–∞—á–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ XLSX-—Ñ–∞–π–ª—ã –∏–∑ Google Drive –≤ target_folder."""
	scopes = ['https://www.googleapis.com/auth/drive.readonly']
	credentials = service_account.Credentials.from_service_account_file(CREDS_PATH, scopes=scopes)
	service = build('drive', 'v3', credentials=credentials)

	results = service.files().list(
		q=f"'{FOLDER_ID}' in parents and mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'",
		fields="files(id, name)"
	).execute()

	files = results.get('files', [])
	if not files:
		raise FileNotFoundError("–í –ø–∞–ø–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")

	os.makedirs(BASE_PATH, exist_ok=True)

	for file in files:
		if (file['name'] not in os.listdir(BASE_PATH) and
				file['name'] != '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤.xlsx' and
				"–ì—Ä–∞—Ñ–∏–∫" not in file['name']):
			request = service.files().get_media(fileId=file['id'])
			out_path = os.path.join(BASE_PATH, file['name'])
			with open(out_path, 'wb') as f:
				downloader = MediaIoBaseDownload(f, request)
				done = False
				while not done:
					status, done = downloader.next_chunk()

# ==============================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
# ==============================

def get_schedule(modifier: str, course: int, group: str):
	"""
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
	- day: 'Today', 'Tomorrow' –∏–ª–∏ 'Weekly'
	- course: '1-2' –∏–ª–∏ '3-4'
	- group: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
	"""
	if course not in range(1,4+1):
		raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±—Ä–∞–Ω –∫—É—Ä—Å')

	if modifier not in ("Weekly","Today","Tomorrow"):
		raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

	now = datetime.now().astimezone()
	offset = timedelta(days=(modifier == "Tomorrow"), hours=5) - now.utcoffset()
	current_time = now + offset
	current_time += timedelta(days= (modifier=='Weekly' and current_time.date().weekday()==6))
	current_date = current_time.date()
	if current_date.weekday()==6:
		raise ValueError("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

	filename = ""

	# –ò—â–µ–º —Ñ–∞–π–ª —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–∞—Ç–∞–º–∏
	for file in os.listdir(BASE_PATH):
		_ , course_range, _ , _ , date = file.split(" ")
		print(course_range,date)
		if str(course) in course_range:
			date = date.replace("–≥..xlsx", "") # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π –≤ –¥–∞—Ç–µ
			start_date, end_date = _parse_date_range(date)
			if start_date <= current_date <= end_date:
				filename = file
				break
	print(filename,1)

	if not filename:
		return upload_and_retry(modifier, course, group)

	return parse_schedule_file(os.path.join(BASE_PATH, filename), modifier, group, current_date)


def parse_schedule_file(filepath: str, modifier: str, group: str, date: datetime.date)-> dict[str,list[dict[str,str]]]:
	"""
	–†–∞–∑–±–æ—Ä XLSX —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
	"""
	workbook = openpyxl.load_workbook(filepath)
	sheet = workbook.active
	need_group = None
	for column in range(6,sheet.max_column+1,5): #
		if sheet.cell(row=10,column=column).value.replace(" /–í/",'') == group:
			need_group = sheet.cell(row=10,column=column)
			break

	if not need_group:
		raise FileNotFoundError("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ")

	if modifier in ("Today", "Tomorrow"):
		return parse_single_day(sheet, need_group, date)
	else:
		return parse_weekly(sheet, need_group)


def parse_single_day(sheet, need_group, date: datetime.date) -> dict[str,list[dict[str,str]]]:
	"""–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å."""
	needed_row = None

	for row in range(14,74+1,12):
		if date.strftime("%d.%m.%Y") in str(sheet.cell(row=row, column=1).value):
			needed_row = row
			break
	if not needed_row:
		raise FileNotFoundError("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

	day_schedule = []
	if date.weekday == 0:
		day_schedule.append({'time':'8.30-9.10',
		                     'subject':'–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å',
		                     "cabinet": "–ù–µ –Ω–∞–ø–∏—Å–∞–Ω",
		                     'teacher':'–ù–µ –Ω–∞–ø–∏—Å–∞–Ω'})
	for i in range(0,12,2): #6 —è—á–µ–µ–∫, –ø–æ 2 —Å—Ç—Ä–æ–∫–∏ –≤ –∫–∞–∂–¥–æ–π
		if sheet.cell(needed_row + i, need_group.column).value is not None:
			day_schedule.append({
				'time': sheet.cell(needed_row + i, 4).value,
				'subject': sheet.cell(needed_row + i, need_group.column).value,
				'cabinet': sheet.cell(needed_row + i, need_group.column + 3).value,
				'teacher': sheet.cell(needed_row + i + 1, need_group.column).value})

	return {sheet.cell(row=needed_row, column=1).value:day_schedule}


def parse_weekly(sheet, need_group) -> dict[str,list[dict[str,str]]]:
	"""–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é."""
	weekly = {}
	for row in range(14,74+1,12): # 6 –¥–Ω–µ–π –ø–æ 6 —è—á–µ–µ–∫, –≤ –∫–∞–∂–¥–æ–π –ø–æ 2 —Å—Ç—Ä–æ–∫–∏, –¥–∞—Ç—ã —Å 14 —Å—Ç—Ä–æ–∫–∏
		date: str = sheet.cell(row=row,column=1).value[:10] # –≤ 1 –∫–æ–ª–æ–Ω–∫–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –¥–∞—Ç—ã
		# –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy WEEKDAY
		day = parse_single_day(sheet,need_group,datetime.strptime(date,"%d.%m.%Y"))
		weekly.update(day)
	return weekly


def upload_and_retry(day: str, course: int, group: str):
	"""
	–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, —Å–∫–∞—á–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
	"""
	print("–ü—Ä–æ–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
	_remove_all_files()
	_download_new_xlsx()
	return get_schedule(day, course, group)

def parse_schedule(schedule: dict) -> str:
	message=''
	for key,value in schedule.items():
		message+=f"üóì{key}<br>"
		for n,subject in enumerate(value):
			message+=(f"{n+1}){subject['subject']}<br>"
			          f"    –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {subject['teacher']}<br>"
			          f"    –í—Ä–µ–º—è: {subject['time']}<br>"
			          f"    –ö–∞–±–∏–Ω–µ—Ç: {subject['cabinet']}<br>")
		message += '<br>'
	return message